<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Available" xml:space="preserve">
    <value>What positions are available to me now</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Compare" xml:space="preserve">
    <value>Compare my position to another position</value>
  </data>
  <data name="Compare Function" xml:space="preserve">
    <value>The Compare Function</value>
  </data>
  <data name="contcompare" xml:space="preserve">
    <value>Continue to Compare</value>
  </data>
  <data name="contsimilar" xml:space="preserve">
    <value>Continue to Similar Search</value>
  </data>
  <data name="infocompare" xml:space="preserve">
    <value>Click here for more information on the Compare function</value>
  </data>
  <data name="infosimilar" xml:space="preserve">
    <value>Click here for more information on the Similar Search function</value>
  </data>
  <data name="modalcompare" xml:space="preserve">
    <value>&lt;p&gt;This feature allows you to compare your currently selected position with any other position in the Canadian Coast Guard. By selecting it, and then another position, the function will yield both position results side by side so that you can view the differences in location, certification, competencies, and ratings. If the position you’re comparing to is one you seek, you can then download the results, save or print, as the basis of a training plan.&lt;/p&gt;</value>
  </data>
  <data name="modalsimilar" xml:space="preserve">
    <value>&lt;p&gt;This feature allows you to find positions similar to the one you’ve already selected. The search will yield percentage results by functionality (e.g. engineering, administrative, logistics, etc.). Results may not be at the same pay level as the position you’ve already selected.&lt;/p&gt;
                    &lt;p&gt;If the position you’re comparing to (i.e. the position you’ve already selected) has certificates associated with it, there will be a box offering you to click the certificates. If you click one or more, the similar search will yield positions with those certifications, regardless of level.&lt;/p&gt;
                    &lt;p&gt;If you don’t select a certificate or the position you’re comparing to doesn’t have a certificate associated with it, you may simply click a percentage match. Clicking on 100% will yield results at the same classification, level, and levels below and above. If you click other percentages, the results will be positions of similar functionality, but not level.&lt;/p&gt;
                    &lt;p&gt;If you click a certification AND a percentage, the similar search will only yield positions with those certifications, regardless of level.&lt;/p&gt;</value>
  </data>
  <data name="PhotoCompare" xml:space="preserve">
    <value>Photo of two job positions within the Canadian Coast Guard</value>
  </data>
  <data name="PhotoSimilar" xml:space="preserve">
    <value>Photo of four job positions within the Canadian Coast Guard</value>
  </data>
  <data name="Question1" xml:space="preserve">
    <value>How would you like to perform your search?</value>
  </data>
  <data name="Similar" xml:space="preserve">
    <value>Find similar positions to my current position</value>
  </data>
  <data name="Similar Function" xml:space="preserve">
    <value>Similar Search Function</value>
  </data>
  <data name="textinfocompare" xml:space="preserve">
    <value>(click here for more information on the compare function)</value>
  </data>
  <data name="textinfosimilar" xml:space="preserve">
    <value>(click here for more information on the similar search function)</value>
  </data>
</root>