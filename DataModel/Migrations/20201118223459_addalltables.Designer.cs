// <auto-generated />
using System;
using DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataModel.Migrations
{
    [DbContext(typeof(CctDbContext))]
    [Migration("20201118223459_addalltables")]
    partial class addalltables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataModel.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescEng")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DescFre")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEng")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameFre")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RequireIndicatorEng")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RequireIndicatorFre")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescEng = "lorem ipsum",
                            DescFre = "lorem ipsum",
                            NameEng = "Master 1500 GT",
                            NameFre = "Master 1500 GT",
                            RequireIndicatorEng = "lorem ipsum",
                            RequireIndicatorFre = "lorem ipsum"
                        },
                        new
                        {
                            Id = 2,
                            DescEng = "lorem ipsum",
                            DescFre = "lorem ipsum",
                            NameEng = "Master 1600A GT",
                            NameFre = "Master 1600A GT",
                            RequireIndicatorEng = "lorem ipsum",
                            RequireIndicatorFre = "lorem ipsum"
                        },
                        new
                        {
                            Id = 3,
                            DescEng = "lorem ipsum",
                            DescFre = "lorem ipsum",
                            NameEng = "Z Alpha MDX",
                            NameFre = "Z Alpha MDX",
                            RequireIndicatorEng = "lorem ipsum",
                            RequireIndicatorFre = "lorem ipsum"
                        },
                        new
                        {
                            Id = 4,
                            DescEng = "lorem ipsum",
                            DescFre = "lorem ipsum",
                            NameEng = "V Delta MKZ",
                            NameFre = "V Delta MKZ",
                            RequireIndicatorEng = "lorem ipsum",
                            RequireIndicatorFre = "lorem ipsum"
                        },
                        new
                        {
                            Id = 5,
                            DescEng = "lorem ipsum",
                            DescFre = "lorem ipsum",
                            NameEng = "six Sigma",
                            NameFre = "six Sigma",
                            RequireIndicatorEng = "lorem ipsum",
                            RequireIndicatorFre = "lorem ipsum"
                        },
                        new
                        {
                            Id = 6,
                            DescEng = "lorem ipsum",
                            DescFre = "lorem ipsum",
                            NameEng = "Gamma v9",
                            NameFre = "Gamma v9",
                            RequireIndicatorEng = "lorem ipsum",
                            RequireIndicatorFre = "lorem ipsum"
                        });
                });

            modelBuilder.Entity("DataModel.Competency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DescFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Competencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescEng = "lorem ipus",
                            DescFre = "lorem ipus",
                            NameEng = "Organizational Knowledge",
                            NameFre = "Connaissances organisationnelles"
                        },
                        new
                        {
                            Id = 2,
                            DescEng = "lorem ipus",
                            DescFre = "lorem ipus",
                            NameEng = "Materiel and Supply Chain Management",
                            NameFre = "Matériel et chaîne d'approvisionnement Gestion"
                        },
                        new
                        {
                            Id = 3,
                            DescEng = "lorem ipus",
                            DescFre = "lorem ipus",
                            NameEng = "Planning and Prioritizing",
                            NameFre = "Planification et établissement des priorités"
                        },
                        new
                        {
                            Id = 4,
                            DescEng = "lorem ipus",
                            DescFre = "lorem ipus",
                            NameEng = "Life-Cycle Asset Management",
                            NameFre = "Gestion du cycle de vie des actifs"
                        },
                        new
                        {
                            Id = 5,
                            DescEng = "lorem ipus",
                            DescFre = "lorem ipus",
                            NameEng = "Inventory Management Systems",
                            NameFre = "Gestion du cycle de vie des actifs"
                        },
                        new
                        {
                            Id = 6,
                            DescEng = "lorem ipus",
                            DescFre = "lorem ipus",
                            NameEng = "Control and procurement",
                            NameFre = "Controlle et approvisionnement"
                        });
                });

            modelBuilder.Entity("DataModel.CompetencyLevelRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescEng")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DescFre")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("CompetencyLevelRequirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre"
                        },
                        new
                        {
                            Id = 2,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre"
                        },
                        new
                        {
                            Id = 3,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre"
                        },
                        new
                        {
                            Id = 4,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre"
                        },
                        new
                        {
                            Id = 5,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre"
                        });
                });

            modelBuilder.Entity("DataModel.CompetencyRatingLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescEng")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DescFre")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompetencyRatingLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra",
                            NameEng = "Fundamental Awareness",
                            NameFre = "activité fondamentale de sensibilisation",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra",
                            NameEng = "Novice",
                            NameFre = "Niveau debutant(e)",
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra",
                            NameEng = "Intermediate",
                            NameFre = "Niveau intermediaire",
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre",
                            NameEng = "Advanced",
                            NameFre = "Niveau avancé",
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFre",
                            NameEng = "Expert",
                            NameFre = "Niveau expert",
                            Value = 5
                        });
                });

            modelBuilder.Entity("DataModel.CompetencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("CompetencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameEng = "Knowledge Elements",
                            NameFre = "Éléments de connaissance"
                        },
                        new
                        {
                            Id = 2,
                            NameEng = "Technical Elements",
                            NameFre = "Éléments techniques"
                        },
                        new
                        {
                            Id = 3,
                            NameEng = "Behavioural Elements",
                            NameFre = "Éléments comportementaux"
                        });
                });

            modelBuilder.Entity("DataModel.CompetencyTypeGroup", b =>
                {
                    b.Property<int>("CompetencyId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("CompetencyId", "CompetencyTypeId");

                    b.HasIndex("CompetencyTypeId");

                    b.ToTable("CompetencyTypeGroups");

                    b.HasData(
                        new
                        {
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            CompetencyId = 2,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            CompetencyId = 4,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            CompetencyId = 5,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            CompetencyId = 6,
                            CompetencyTypeId = 3
                        });
                });

            modelBuilder.Entity("DataModel.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ValueEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ValueFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("JobCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ValueEng = "Seagoing",
                            ValueFre = "En mer"
                        },
                        new
                        {
                            Id = 2,
                            ValueEng = "non-seagoing",
                            ValueFre = "sur terre"
                        });
                });

            modelBuilder.Entity("DataModel.JobGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CodeFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("JobGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeEng = "AS",
                            CodeFre = "SA",
                            NameEng = "Administrative Services",
                            NameFre = "Services Administratif"
                        },
                        new
                        {
                            Id = 2,
                            CodeEng = "CS",
                            CodeFre = "SI",
                            NameEng = "Computer Systems",
                            NameFre = "Systèmes informatiques"
                        },
                        new
                        {
                            Id = 3,
                            CodeEng = "GT",
                            CodeFre = "TG",
                            NameEng = "General Technical",
                            NameFre = "Technique générale"
                        },
                        new
                        {
                            Id = 4,
                            CodeEng = "GS",
                            CodeFre = "SG",
                            NameEng = "General Services",
                            NameFre = "Services généraux"
                        },
                        new
                        {
                            Id = 5,
                            CodeEng = "L",
                            CodeFre = "GP",
                            NameEng = "Lightkeepers",
                            NameFre = "Les gardiens de phare"
                        },
                        new
                        {
                            Id = 6,
                            CodeEng = "ES",
                            CodeFre = "TS",
                            NameEng = "Engineering and Scientific Support",
                            NameFre = "Assistance technique et scientifique"
                        },
                        new
                        {
                            Id = 7,
                            CodeEng = "PS",
                            CodeFre = "AA",
                            NameEng = "Purchasing and Supply",
                            NameFre = "Achat et approvisionnement"
                        },
                        new
                        {
                            Id = 8,
                            CodeEng = "GL",
                            CodeFre = "GM",
                            NameEng = "General Labour and Trades",
                            NameFre = "Travail général et métiers"
                        },
                        new
                        {
                            Id = 9,
                            CodeEng = "SC",
                            CodeFre = "EN",
                            NameEng = "Ships' Crews",
                            NameFre = "Équipages de navires"
                        },
                        new
                        {
                            Id = 10,
                            CodeEng = "SO",
                            CodeFre = "ON",
                            NameEng = "Ships' Officers",
                            NameFre = "Officiers de navire"
                        });
                });

            modelBuilder.Entity("DataModel.JobGroupLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LevelValue")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("JobGroupLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LevelValue = "01"
                        },
                        new
                        {
                            Id = 2,
                            LevelValue = "02"
                        },
                        new
                        {
                            Id = 3,
                            LevelValue = "03"
                        });
                });

            modelBuilder.Entity("DataModel.JobGroupPosition", b =>
                {
                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobGroupLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobKeyTaskPerLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobLocationRegionId")
                        .HasColumnType("int");

                    b.HasKey("JobGroupId", "JobGroupLevelId", "JobPositionId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobGroupLevelId");

                    b.HasIndex("JobKeyTaskPerLevelId");

                    b.HasIndex("JobLocationRegionId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("JobGroupPositions");

                    b.HasData(
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 1,
                            JobPositionId = 1,
                            JobCategoryId = 1,
                            JobKeyTaskPerLevelId = 1,
                            JobLocationRegionId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            JobCategoryId = 1,
                            JobKeyTaskPerLevelId = 2,
                            JobLocationRegionId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 1,
                            JobPositionId = 3,
                            JobCategoryId = 2,
                            JobKeyTaskPerLevelId = 4,
                            JobLocationRegionId = 3
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            JobCategoryId = 2,
                            JobKeyTaskPerLevelId = 4,
                            JobLocationRegionId = 4
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 1,
                            JobPositionId = 5,
                            JobCategoryId = 2,
                            JobKeyTaskPerLevelId = 4,
                            JobLocationRegionId = 3
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 2,
                            JobPositionId = 6,
                            JobCategoryId = 2,
                            JobKeyTaskPerLevelId = 4,
                            JobLocationRegionId = 4
                        });
                });

            modelBuilder.Entity("DataModel.JobKeyTaskPerLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescEng")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DescFre")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("JobKeyTaskPerLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra"
                        },
                        new
                        {
                            Id = 2,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra"
                        },
                        new
                        {
                            Id = 3,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra"
                        },
                        new
                        {
                            Id = 4,
                            DescEng = "Lorem ipsumEng",
                            DescFre = "Lorem ipsumFra"
                        });
                });

            modelBuilder.Entity("DataModel.JobLocationRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("JobLocationRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameEng = "Atlantic",
                            NameFre = "Quebec"
                        },
                        new
                        {
                            Id = 2,
                            NameEng = "Western",
                            NameFre = "Ouest"
                        },
                        new
                        {
                            Id = 3,
                            NameEng = "Arctic",
                            NameFre = "Artique"
                        },
                        new
                        {
                            Id = 4,
                            NameEng = "National Headquarters",
                            NameFre = "siège national"
                        });
                });

            modelBuilder.Entity("DataModel.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TitleEng")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TitleFre")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("JobPositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TitleEng = "Manager",
                            TitleFre = "Gestionnaire"
                        },
                        new
                        {
                            Id = 2,
                            TitleEng = "Technical Advisor",
                            TitleFre = "Conseiller technique"
                        },
                        new
                        {
                            Id = 3,
                            TitleEng = "Business Architect",
                            TitleFre = "Architecte d'affaires"
                        },
                        new
                        {
                            Id = 4,
                            TitleEng = "Project Officer",
                            TitleFre = "Agent de projets"
                        },
                        new
                        {
                            Id = 5,
                            TitleEng = "cooker",
                            TitleFre = "cuisiner"
                        },
                        new
                        {
                            Id = 6,
                            TitleEng = "Major",
                            TitleFre = "Major"
                        });
                });

            modelBuilder.Entity("DataModel.JobPositionCertificate", b =>
                {
                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.HasKey("JobPositionId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("JobPositionCertificates");
                });

            modelBuilder.Entity("DataModel.JobPositionCompetency", b =>
                {
                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("JobPositionId", "CompetencyId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("CompetencyTypeId");

                    b.ToTable("JobPositionCompetencies");

                    b.HasData(
                        new
                        {
                            JobPositionId = 1,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobPositionId = 1,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 1,
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 2,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobPositionId = 2,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 3,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 3,
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 3,
                            CompetencyId = 4,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobPositionId = 3,
                            CompetencyId = 6,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobPositionId = 4,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 4,
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 4,
                            CompetencyId = 4,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobPositionId = 5,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobPositionId = 5,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobPositionId = 6,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobPositionId = 6,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        });
                });

            modelBuilder.Entity("DataModel.JobRole", b =>
                {
                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobGroupLevelId")
                        .HasColumnType("int");

                    b.HasKey("JobGroupId", "JobGroupLevelId");

                    b.HasIndex("JobGroupLevelId");

                    b.ToTable("JobRoles");

                    b.HasData(
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 1
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 1
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 2
                        });
                });

            modelBuilder.Entity("DataModel.JobRolePositionCertificate", b =>
                {
                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobGroupLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.HasKey("JobGroupId", "JobGroupLevelId", "JobPositionId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("JobGroupLevelId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("JobRolePositionCertificates");

                    b.HasData(
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CertificateId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CertificateId = 2
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CertificateId = 3
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            CertificateId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            CertificateId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CertificateId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CertificateId = 3
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CertificateId = 5
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CertificateId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CertificateId = 3
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CertificateId = 1
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CertificateId = 2
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CertificateId = 4
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CertificateId = 6
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 2,
                            JobPositionId = 6,
                            CertificateId = 6
                        });
                });

            modelBuilder.Entity("DataModel.JobRolePositionCompetency", b =>
                {
                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobGroupLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("JobGroupId", "JobGroupLevelId", "JobPositionId", "CompetencyId", "CompetencyTypeId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("CompetencyTypeId");

                    b.HasIndex("JobGroupLevelId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("JobRolePositionCompetencies");

                    b.HasData(
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 4,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 6,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CompetencyId = 3,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CompetencyId = 4,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 4,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 6,
                            CompetencyTypeId = 3
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 2,
                            JobPositionId = 6,
                            CompetencyId = 1,
                            CompetencyTypeId = 1
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 2,
                            JobPositionId = 6,
                            CompetencyId = 2,
                            CompetencyTypeId = 2
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 2,
                            JobPositionId = 6,
                            CompetencyId = 6,
                            CompetencyTypeId = 3
                        });
                });

            modelBuilder.Entity("DataModel.JobRolePositionCompetencyRating", b =>
                {
                    b.Property<int>("JobGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobGroupLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyLevelReqId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetencyLevelRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("CompetencyRatingLevelId")
                        .HasColumnType("int");

                    b.HasKey("JobGroupId", "JobGroupLevelId", "JobPositionId", "CompetencyId", "CompetencyTypeId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("CompetencyLevelRequirementId");

                    b.HasIndex("CompetencyRatingLevelId");

                    b.HasIndex("CompetencyTypeId");

                    b.HasIndex("JobGroupLevelId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("JobRolePositionCompetencyRatings");

                    b.HasData(
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CompetencyId = 1,
                            CompetencyTypeId = 1,
                            CompetencyLevelReqId = 1,
                            CompetencyRatingLevelId = 1
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CompetencyId = 2,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 2,
                            CompetencyRatingLevelId = 2
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 3,
                            JobPositionId = 1,
                            CompetencyId = 3,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 3,
                            CompetencyRatingLevelId = 3
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            CompetencyId = 1,
                            CompetencyTypeId = 1,
                            CompetencyLevelReqId = 4,
                            CompetencyRatingLevelId = 4
                        },
                        new
                        {
                            JobGroupId = 1,
                            JobGroupLevelId = 2,
                            JobPositionId = 2,
                            CompetencyId = 2,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 5,
                            CompetencyRatingLevelId = 5
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 2,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 1,
                            CompetencyRatingLevelId = 1
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 3,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 2,
                            CompetencyRatingLevelId = 2
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 4,
                            CompetencyTypeId = 3,
                            CompetencyLevelReqId = 3,
                            CompetencyRatingLevelId = 3
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 3,
                            JobPositionId = 3,
                            CompetencyId = 6,
                            CompetencyTypeId = 3,
                            CompetencyLevelReqId = 4,
                            CompetencyRatingLevelId = 4
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CompetencyId = 2,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 5,
                            CompetencyRatingLevelId = 5
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CompetencyId = 3,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 1,
                            CompetencyRatingLevelId = 1
                        },
                        new
                        {
                            JobGroupId = 2,
                            JobGroupLevelId = 2,
                            JobPositionId = 4,
                            CompetencyId = 4,
                            CompetencyTypeId = 3,
                            CompetencyLevelReqId = 2,
                            CompetencyRatingLevelId = 2
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 1,
                            CompetencyTypeId = 1,
                            CompetencyLevelReqId = 4,
                            CompetencyRatingLevelId = 4
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 2,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 4,
                            CompetencyRatingLevelId = 4
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 4,
                            CompetencyTypeId = 3,
                            CompetencyLevelReqId = 5,
                            CompetencyRatingLevelId = 5
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 5,
                            CompetencyId = 6,
                            CompetencyTypeId = 3,
                            CompetencyLevelReqId = 4,
                            CompetencyRatingLevelId = 4
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 6,
                            CompetencyId = 1,
                            CompetencyTypeId = 1,
                            CompetencyLevelReqId = 3,
                            CompetencyRatingLevelId = 3
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 6,
                            CompetencyId = 2,
                            CompetencyTypeId = 2,
                            CompetencyLevelReqId = 4,
                            CompetencyRatingLevelId = 4
                        },
                        new
                        {
                            JobGroupId = 3,
                            JobGroupLevelId = 3,
                            JobPositionId = 6,
                            CompetencyId = 6,
                            CompetencyTypeId = 3,
                            CompetencyLevelReqId = 3,
                            CompetencyRatingLevelId = 3
                        });
                });

            modelBuilder.Entity("DataModel.CompetencyTypeGroup", b =>
                {
                    b.HasOne("DataModel.Competency", "Competency")
                        .WithMany("CompetencyTypeGroups")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.CompetencyType", "CompetencyType")
                        .WithMany("CompetencyTypeGroups")
                        .HasForeignKey("CompetencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobGroupPosition", b =>
                {
                    b.HasOne("DataModel.JobCategory", "JobCategory")
                        .WithMany("JobGroupPositions")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroup", "JobGroup")
                        .WithMany("JobGroupPositions")
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroupLevel", "JobGroupLevel")
                        .WithMany("JobGroupPositions")
                        .HasForeignKey("JobGroupLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobKeyTaskPerLevel", "JobKeyTaskPerLevel")
                        .WithMany("JobGroupPositions")
                        .HasForeignKey("JobKeyTaskPerLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobLocationRegion", "JobLocationRegion")
                        .WithMany("JobGroupPositions")
                        .HasForeignKey("JobLocationRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobPositionCertificate", b =>
                {
                    b.HasOne("DataModel.Certificate", "Certificate")
                        .WithMany("JobPositionCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobPositionCompetency", b =>
                {
                    b.HasOne("DataModel.Competency", "Competency")
                        .WithMany("JobPositionCompetencies")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.CompetencyType", "CompetencyType")
                        .WithMany()
                        .HasForeignKey("CompetencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobPosition", "JobPosition")
                        .WithMany("JobPositionCertCompetencies")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobRole", b =>
                {
                    b.HasOne("DataModel.JobGroup", "JobGroup")
                        .WithMany("JobRoles")
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroupLevel", "JobGroupLevel")
                        .WithMany("JobRoles")
                        .HasForeignKey("JobGroupLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobRolePositionCertificate", b =>
                {
                    b.HasOne("DataModel.Certificate", "Certificate")
                        .WithMany("JobRolePositionCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroup", "JobGroup")
                        .WithMany()
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroupLevel", "JobGroupLevel")
                        .WithMany()
                        .HasForeignKey("JobGroupLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobRolePositionCompetency", b =>
                {
                    b.HasOne("DataModel.Competency", "Competency")
                        .WithMany("JobRolePositionCompetencies")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.CompetencyType", "CompetencyType")
                        .WithMany()
                        .HasForeignKey("CompetencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroup", "JobGroup")
                        .WithMany("JobRolePositionCompetencies")
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroupLevel", "JobGroupLevel")
                        .WithMany("JobRolePositionCompetencies")
                        .HasForeignKey("JobGroupLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobPosition", "JobPosition")
                        .WithMany("JobRolePositionCompetencies")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.JobRolePositionCompetencyRating", b =>
                {
                    b.HasOne("DataModel.Competency", "Competency")
                        .WithMany("JobPositionCompetencyRatings")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.CompetencyLevelRequirement", "CompetencyLevelRequirement")
                        .WithMany("JobRolePositionCompetencyRatings")
                        .HasForeignKey("CompetencyLevelRequirementId");

                    b.HasOne("DataModel.CompetencyRatingLevel", "CompetencyRatingLevel")
                        .WithMany("JobRolePositionCompetencyRatings")
                        .HasForeignKey("CompetencyRatingLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.CompetencyType", "CompetencyType")
                        .WithMany()
                        .HasForeignKey("CompetencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroup", "JobGroup")
                        .WithMany()
                        .HasForeignKey("JobGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobGroupLevel", "JobGroupLevel")
                        .WithMany()
                        .HasForeignKey("JobGroupLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
